#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace API
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="logging")]
	public partial class loggingDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAPIAnalytic(APIAnalytic instance);
    partial void UpdateAPIAnalytic(APIAnalytic instance);
    partial void DeleteAPIAnalytic(APIAnalytic instance);
    partial void InsertIPtoDNS(IPtoDNS instance);
    partial void UpdateIPtoDNS(IPtoDNS instance);
    partial void DeleteIPtoDNS(IPtoDNS instance);
    #endregion
		
		public loggingDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["loggingConnectionString1"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public loggingDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public loggingDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public loggingDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public loggingDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<APIAnalytic> APIAnalytics
		{
			get
			{
				return this.GetTable<APIAnalytic>();
			}
		}
		
		public System.Data.Linq.Table<IPtoDNS> IPtoDNS
		{
			get
			{
				return this.GetTable<IPtoDNS>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.APIAnalytics")]
	public partial class APIAnalytic : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private int _addressID;
		
		private string _url;
		
		private string _method;
		
		private string _querystring;
		
		private System.DateTime _date;
		
		private string _referrer;
		
		private string _HttpMethod;
		
		private EntityRef<IPtoDNS> _IPtoDNS;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnaddressIDChanging(int value);
    partial void OnaddressIDChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OnmethodChanging(string value);
    partial void OnmethodChanged();
    partial void OnquerystringChanging(string value);
    partial void OnquerystringChanged();
    partial void OndateChanging(System.DateTime value);
    partial void OndateChanged();
    partial void OnreferrerChanging(string value);
    partial void OnreferrerChanged();
    partial void OnHttpMethodChanging(string value);
    partial void OnHttpMethodChanged();
    #endregion
		
		public APIAnalytic()
		{
			this._IPtoDNS = default(EntityRef<IPtoDNS>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_addressID", DbType="Int NOT NULL")]
		public int addressID
		{
			get
			{
				return this._addressID;
			}
			set
			{
				if ((this._addressID != value))
				{
					if (this._IPtoDNS.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnaddressIDChanging(value);
					this.SendPropertyChanging();
					this._addressID = value;
					this.SendPropertyChanged("addressID");
					this.OnaddressIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_url", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_method", DbType="VarChar(255)")]
		public string method
		{
			get
			{
				return this._method;
			}
			set
			{
				if ((this._method != value))
				{
					this.OnmethodChanging(value);
					this.SendPropertyChanging();
					this._method = value;
					this.SendPropertyChanged("method");
					this.OnmethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_querystring", DbType="VarChar(255)")]
		public string querystring
		{
			get
			{
				return this._querystring;
			}
			set
			{
				if ((this._querystring != value))
				{
					this.OnquerystringChanging(value);
					this.SendPropertyChanging();
					this._querystring = value;
					this.SendPropertyChanged("querystring");
					this.OnquerystringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_date", DbType="DateTime NOT NULL")]
		public System.DateTime date
		{
			get
			{
				return this._date;
			}
			set
			{
				if ((this._date != value))
				{
					this.OndateChanging(value);
					this.SendPropertyChanging();
					this._date = value;
					this.SendPropertyChanged("date");
					this.OndateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_referrer", DbType="VarChar(255)")]
		public string referrer
		{
			get
			{
				return this._referrer;
			}
			set
			{
				if ((this._referrer != value))
				{
					this.OnreferrerChanging(value);
					this.SendPropertyChanging();
					this._referrer = value;
					this.SendPropertyChanged("referrer");
					this.OnreferrerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HttpMethod", DbType="VarChar(100)")]
		public string HttpMethod
		{
			get
			{
				return this._HttpMethod;
			}
			set
			{
				if ((this._HttpMethod != value))
				{
					this.OnHttpMethodChanging(value);
					this.SendPropertyChanging();
					this._HttpMethod = value;
					this.SendPropertyChanged("HttpMethod");
					this.OnHttpMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IPtoDN_APIAnalytic", Storage="_IPtoDNS", ThisKey="addressID", OtherKey="ID", IsForeignKey=true)]
		public IPtoDNS IPtoDNS
		{
			get
			{
				return this._IPtoDNS.Entity;
			}
			set
			{
				IPtoDNS previousValue = this._IPtoDNS.Entity;
				if (((previousValue != value) 
							|| (this._IPtoDNS.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._IPtoDNS.Entity = null;
						previousValue.APIAnalytics.Remove(this);
					}
					this._IPtoDNS.Entity = value;
					if ((value != null))
					{
						value.APIAnalytics.Add(this);
						this._addressID = value.ID;
					}
					else
					{
						this._addressID = default(int);
					}
					this.SendPropertyChanged("IPtoDNS");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IPtoDNS")]
	public partial class IPtoDNS : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ipaddress;
		
		private string _dnsentry;
		
		private System.DateTime _dateChecked;
		
		private EntitySet<APIAnalytic> _APIAnalytics;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnipaddressChanging(string value);
    partial void OnipaddressChanged();
    partial void OndnsentryChanging(string value);
    partial void OndnsentryChanged();
    partial void OndateCheckedChanging(System.DateTime value);
    partial void OndateCheckedChanged();
    #endregion
		
		public IPtoDNS()
		{
			this._APIAnalytics = new EntitySet<APIAnalytic>(new Action<APIAnalytic>(this.attach_APIAnalytics), new Action<APIAnalytic>(this.detach_APIAnalytics));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ipaddress", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string ipaddress
		{
			get
			{
				return this._ipaddress;
			}
			set
			{
				if ((this._ipaddress != value))
				{
					this.OnipaddressChanging(value);
					this.SendPropertyChanging();
					this._ipaddress = value;
					this.SendPropertyChanged("ipaddress");
					this.OnipaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dnsentry", DbType="VarChar(255)")]
		public string dnsentry
		{
			get
			{
				return this._dnsentry;
			}
			set
			{
				if ((this._dnsentry != value))
				{
					this.OndnsentryChanging(value);
					this.SendPropertyChanging();
					this._dnsentry = value;
					this.SendPropertyChanged("dnsentry");
					this.OndnsentryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateChecked", DbType="DateTime NOT NULL")]
		public System.DateTime dateChecked
		{
			get
			{
				return this._dateChecked;
			}
			set
			{
				if ((this._dateChecked != value))
				{
					this.OndateCheckedChanging(value);
					this.SendPropertyChanging();
					this._dateChecked = value;
					this.SendPropertyChanged("dateChecked");
					this.OndateCheckedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="IPtoDN_APIAnalytic", Storage="_APIAnalytics", ThisKey="ID", OtherKey="addressID")]
		public EntitySet<APIAnalytic> APIAnalytics
		{
			get
			{
				return this._APIAnalytics;
			}
			set
			{
				this._APIAnalytics.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_APIAnalytics(APIAnalytic entity)
		{
			this.SendPropertyChanging();
			entity.IPtoDNS = this;
		}
		
		private void detach_APIAnalytics(APIAnalytic entity)
		{
			this.SendPropertyChanging();
			entity.IPtoDNS = null;
		}
	}
}
#pragma warning restore 1591
